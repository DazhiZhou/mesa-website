
! star_job.defaults


! the following are parameters for the standard driver for MESA/star.
! non-default values can be set using the "&star_job" namelist at the start of a run.
   
! the descriptions are divided into the following sections:

   ! output
   ! starting model
   ! when to stop
   ! modifications to model
   ! eos controls
   ! nuclear reactions
   ! kap controls
   ! ionization controls
   ! include other inlists
   ! private or experimental


   mesa_dir = '' 
      ! if this is set to the empty string, '', then it defaults to the
         ! environment variable $(MESA_DIR)
   
   chem_isotopes_filename = 'isotopes.data' 
      ! this file is in chem_data in mesa_data_dir
      
   pause_before_terminate = .false.

   ! cache directories
   
      ! mesa uses caches to improve performance.
      ! the default location for these is in the mesa/data directory,
      ! but in some situations it is useful to keep the caches
      ! separately so, for example, multiple users can share the code
      ! and each can have a separate set of caches.
      ! '' means use default location for cache.
      
      ! The need for separate caches arises in cases where we need
      ! to put the main mesa directory in a location that is "read only"
      ! for a group of users (such as in a system directory that requires
      ! "root" or "superuser" to write).  In that case the caches must
      ! be moved out of the main directory to locations that the user
      ! can write.

         eosDT_cache_dir = ''
         eosPT_cache_dir = ''
         ionization_cache_dir = ''
         kap_cache_dir = ''
         rates_cache_dir = ''
         weaklib_cache_dir = ''
         
      ! if you specify cache directories, use a separate one for each.
      ! e.g., something like this
         !eosDT_cache_dir = '/Users/bpaxton/mesa_caches/eosDT_cache'
         !eosPT_cache_dir = '/Users/bpaxton/mesa_caches/eosPT_cache'
         !ionization_cache_dir = '/Users/bpaxton/mesa_caches/ionization_cache'
         !kap_cache_dir = '/Users/bpaxton/mesa_caches/kap_cache'
         !rates_cache_dir = '/Users/bpaxton/mesa_caches/rates_cache'
         !weaklib_cache_dir = '/Users/bpaxton/mesa_caches/weaklib_cache'
      ! you much create the directories yourself -- mesa doesn't do it automatically.

   
! output

      
   save_star_job_namelist = .false. ! dumps all values for &star_job controls to file
   star_job_namelist_name = '' ! if empty, uses a default name

   show_log_description_at_start = .true. 
      ! set this false if you want to skip the initial terminal output 

   show_net_species_info = .false.
      ! if true, then output a list of the species in the current net

   show_net_reactions_info = .false.
      ! if true, then output information about the reactions in the current net
   list_net_reactions = .false.
      ! if true, then output a simple list of the reactions in the current net
      
   show_eqns_and_vars_names = .false.
      ! if true, then output a list of the names of the equations and variables
      
   pgstar_flag = .false.
   save_pgstar_files_when_terminate = .false.
      ! if true, then when the run terminates,
      ! pgstar outputs files for plots that have file_flag = .true.
      ! independently of the corresponding "file_cnt".
   
   history_columns_file = '' ! if null string, use default.
   profile_columns_file = '' ! if null string, use default.
   
   ! at any point during the run, you can save a model for later use
   save_model_number = -111
   save_model_when_terminate = .false.
   save_model_filename = 'undefined'
   
   save_photo_when_terminate = .true.
      ! if true, then save photo for last model before terminate the run

   profile_starting_model = .false.
   profile_model_number = -1111
      
      
   write_profile_when_terminate = .false. ! write to a given name
   filename_for_profile_when_terminate = ''
   
   ! write pulsation info for the model (format given by s% pulse_info_format)
   save_pulsation_info_for_model_number = -111
   save_pulsation_info_when_terminate = .false.
   save_pulsation_info_filename = 'undefined'
   
   ! save_fgong_for_model_number, save_osc_for_model_number, save_gyre_for_model_number
   ! are replaced by save_pulsation_info_for_model_number and friends.
   
   
   ! you can create an atmosphere for use with pulsation codes.
   ! inspired by B. Paczynski, 1969, Acta Astr., vol. 19, 1.
   ! takes into account dilution of luminosity when tau < 2/3,
   ! and calls mlt to get gradT allowing for convection.
   ! you should use the Henyey option for mlt when adding an atmosphere.
   !add_atmosphere_for_fgong = .false.   <<< use s% add_atmosphere_to_pulse_info instead
   !add_atmosphere_for_osc = .false.   <<< use s% add_atmosphere_to_pulse_info instead
   !add_atmosphere_for_gyre = .false.   <<< use s% add_atmosphere_to_pulse_info instead
   
   ! write the model in .short format for use with GR1D
   save_short_format_for_model_number = -111
   save_short_format_filename = 'undefined'
   
   ! write internals -- for debugging
   internals_num = -1 ! only write if this is >= 0
   
   ! in case you want some extra info about retries or backups
   report_retries = .false.
   report_backups = .false.
   
      
   use_se_output = .false. ! se is based on hdf5.  ask Falk about it.


! starting model
   
   ! by default at the start of a run a zams starting model is loaded,
   ! and then the initial_mass, initial_z, and initial_y are adjusted as necessary.
   ! however, there are alternatives.  you can use a model you saved previously,
   ! or you can request the system to create a pre-main-sequence model.
   
   ! btw: the system finds the zams file by using the control called 'zams_filename'
   ! the default zams file is for Z=0.02 and lives in data/star_data/zams_models.
   ! you can create your own zams file and use it instead -- see test_suite/create_zams. 
   
   load_saved_model = .false.
   saved_model_name = 'undefined'
      ! if load_saved_model is true, then use this initial model
   
   create_pre_main_sequence_model = .false.
   
      ! if true, the code will create a starting model with uniform composition,
         ! a core temperature below 10^6 so no nuclear burning, 
         ! and uniform contraction for enough luminosity to make it fully convective.
      
      ! the mass is initial_mass from the controls namelist.
      
      ! if initial_y is < 0 in the controls, then code uses 0.24 + 2*initial_z for initial_y.
      
      ! the h1 mass fraction is set to 1 - (initial_y + initial_z).
      ! the he3 and he4 mass fractions are set according to initial_y
         ! with relative amounts set according to the AG89 solar mass fractions (from chem_def).         
      
      ! the metallicity is initial_z from the controls namelist
         ! with the metals fractions set according to the GS98 values (from chem_def).
      
      ! to set the metals fractions, use initial_zfracs (described below)
   
      ! NOTE: if you have initial convergence problems creating a pre-ms model,
      ! you might try different values for pre_ms_T_c -- that sometimes helps.
      
      pre_ms_T_c = 3e5 ! initial center temperature (below 1d6)
      pre_ms_guess_rho_c = 0 ! optional guess for initial center density
         ! set to 0 to let code pick
      pre_ms_d_log10_P = 0 ! suggested spacing in pressure between points
         ! set to 0 to let code pick
      ! model contruction is from inside out and stops when reaches either of the following limits.
      pre_ms_logT_surf_limit = 3.7
      pre_ms_logP_surf_limit = 3.5
      
      pre_ms_relax_num_steps = 100 
         ! let pre-ms model settle in for this many steps before changing anything else
         
         
         
      create_initial_model = .false. ! this is an alternative to create_pre_main_sequence_model
      ! creates an adiabatic, contracting model for given mass and radius
      ! assumes no nuclear burning and constant entropy. ignores radiation pressure.
      
      radius_in_cm_for_create_initial_model = 0 ! in cm
      mass_in_gm_for_create_initial_model = 0 ! in grams
      
      initial_model_relax_num_steps = 10 
         ! let initial model settle in for this many steps before changing anything else
      
      initial_model_eps = 0.05	! integration accuracy




! when to stop

      steps_to_take_before_terminate = -1 ! ignore if <= 0
         ! if > 0, stop after taking this many steps
         ! sets max_model_number = model_number + steps_to_take_before_terminate
         
      stop_if_this_file_exists = ''
         ! at each step, the code will try to open this file
         ! if the file exists, it will terminate the run
         ! if the file doesn't exist, it will keep going.
      

! modifications to model

   ! controls that only apply to the first model have 'initial' in their names.
      ! they are ignored for restarts.
   
      set_initial_age = .false.
      initial_age = 0 ! in years

      set_initial_model_number = .false.
      initial_model_number = 0

      set_initial_dt = .false.
      years_for_initial_dt = 0 ! in years
      limit_initial_dt = .false.
         ! like set_initial_dt, but does not increase current value for dt_next
         ! dt_next = min(dt_next, years_for_initial_dt*secyer)
   
   ! set composition
      set_uniform_initial_composition = .false. 
      ! this is useful with create_pre_main_sequence_model.
      ! if true, then set composition according to the following:
      ! hydrogen and helium mass fractions
         initial_h1 = -1
         initial_h2 = -1 ! if no h2 in current net, then this will be added to h1
         initial_he3 = -1
         initial_he4 = -1
      ! z fractions -- select one of the options defined in chem_def, e.g., 3 for GS98_zfracs
         ! or set initial_zfracs = 0 to use the special list of z fractions specified in controls
         ! (i.e., z_fraction_li, z_fraction_be, z_fraction_b, etc.)
      initial_zfracs = 3 ! values are defined in mesa/chem/public/chem_def
         ! AG89_zfracs = 1
         ! GN93_zfracs = 2
         ! GS98_zfracs = 3
         ! L03_zfracs = 4
         ! AGS05_zfracs = 5
         ! AGSS09_zfracs = 6
         ! L09_zfracs = 7
         ! A09_Prz_zfracs = 8
      
      ! the following is an alternative to the above "set_uniform_initial_composition" method.
      file_for_uniform_xa = ''
      set_uniform_initial_xa_from_file = .false.
      set_uniform_xa_from_file = .false.
         ! if true, read list of iso name and mass fraction pairs from file file_for_uniform_xa
         ! and use them to set uniform composition
         ! e.g., to convert the star to pure fe56,
         ! a file with just the following line will work (no "!" of course)
         !        fe56   1.0
         
         
      ! fully mix envelope from surface down to given temperature
      mix_envelope_down_to_T = 0
      mix_initial_envelope_down_to_T = 0
         
      ! set abundance of a particular iso in a given range of cells
      set_abundance = .false.
      set_initial_abundance = .false.
      chem_name = 'he3' ! name from chem
      new_frac = 0
      set_abundance_nzlo = -1
      set_abundance_nzhi = -1
      
      ! replace one iso by another in a given range of cells
      replace_element = .false.
      chem_name1 = 'he3' ! name from chem
      chem_name2 = 'he4' ! name from chem
      replace_element_nzlo = -1
      replace_element_nzhi = -1
      
         
   ! relax composition
      relax_initial_composition = .false.
      num_steps_to_relax_composition = 100 ! use this many steps to do conversion
      relax_composition_filename = '' ! file holding composition profile information
         ! file format for relax composition
         ! 1st line: num_species  num_points
         ! then 1 line for for each point where define desired composition
         ! xq xa(1) ... xa(num_species)
            ! xq = fraction of xmstar exterior to the point
            ! where xmstar = mstar - M_center
            ! xa(i) = mass fraction of i'th species
         ! NOTE: it is up to you to ensure that the current net isotopes match
         ! the species in the composition file.
         ! you can set show_net_species_info = .true. to check the isotopes in the net.

      relax_initial_to_xaccrete = .false.
         ! like relax_initial_composition (and uses num_steps_to_relax_composition),
         ! but new composition is set by current specification of accretion abundances
      
   
   ! some modifications must be done gradually over several steps in "pseudo" evolution
   ! these operations have "relax" in their names.
   ! many have an alternative, with "set" in name, that simply make the change all at once.
   ! the "set" version is fine if star can manage to converge the modified model.
   ! but for larger changes where that's not possible, you'll need to "relax" instead.

      relax_Y = .false. ! gradually change average Y, reconverging at each step.
      change_Y = .false. ! simply changes abundances; doesn't reconverge the model.
      relax_initial_Y = .false.
      change_initial_Y = .false.
      new_Y = -1
      ! note: relax_dY in &controls determines the rate of change
   
      relax_Z = .false. ! gradually change average Z, reconverging at each step.
      change_Z = .false. ! simply changes abundances; doesn't reconverge the model.
      relax_initial_Z = .false.
      change_initial_Z = .false.
      new_Z = -1
      ! note: relax_dlnZ in &controls determines the rate of change

      relax_mass = .false. ! gradually change total mass by a wind
      relax_initial_mass = .false.
      new_mass = -1
      lg_max_abs_mdot = -100 
         ! e.g., -4 means max abs mdot 1d-4 msun/year
         ! set to <= -100 to let code pick

      relax_mass_scale = .false. ! gradually rescale mass of star to new_mass
         ! rescales star mass without changing composition as function of m/mstar
      relax_initial_mass_scale = .false.
      dlgm_per_step = 1d-3
      change_mass_years_for_dt = 1

      relax_dxdt_nuc_factor = .false. ! gradually rescale dxdt_nuc_factor 
         ! at each step, multiply dxdt_nuc_factor by dxdt_nuc_factor_multiplier
         ! until reach new_dxdt_nuc_factor
      relax_initial_dxdt_nuc_factor = .false.
      new_dxdt_nuc_factor = 0
      dxdt_nuc_factor_multiplier = 0 

      relax_eps_nuc_factor = .false. ! gradually rescale eps_nuc_factor 
         ! at each step, multiply eps_nuc_factor by eps_nuc_factor_multiplier
         ! until reach new_eps_nuc_factor
      relax_initial_eps_nuc_factor = .false.
      new_eps_nuc_factor = 0
      eps_nuc_factor_multiplier = 0 

      relax_opacity_max = .false. ! gradually rescale opacity_max 
         ! at each step, multiply opacity_max by opacity_max_multiplier
         ! until reach new_opacity_max
      relax_initial_opacity_max = .false.
      new_opacity_max = 0
      opacity_max_multiplier = 0       

      relax_max_surf_dq = .false. ! gradually rescale max_surface_cell_dq 
         ! at each step, multiply max_surface_cell_dq by opacity_max_multiplier
         ! until reach new_max_surf_dq
      relax_initial_max_surf_dq = .false.
      new_max_surf_dq = 0
      max_surf_dq_multiplier = 0       

      relax_surf_bc_offset_factor = .false. ! gradually change surf_bc_offset_factor 
      relax_initial_surf_bc_offset_factor = .false.
      new_bc_offset_factor = 0
      dlnbc_offset_factor = 0 

      relax_to_this_tau_factor = -1 ! tau_factor of 1 puts outer cell at photosphere.
         ! can go much larger or much smaller to move surface in or out from photosphere.
      dlogtau_factor = 0.1 ! change log10(tau_factor) by at most this amount per step
      relax_tau_factor = .false. ! gradually change tau_factor, reconverging at each step.
      relax_initial_tau_factor = .false.
      relax_tau_factor_after_core_He_burn = -1 ! ignore if <= 0
         ! change tau_factor when center H1 < 1e-4 and center He4 < this.
      relax_tau_factor_after_core_C_burn = -1  ! ignore if <= 0
         ! change tau_factor when center H1 < 1e-4, He4 < 1e-4, and center C12 < this.
         
      set_to_this_tau_factor = -1
      set_tau_factor = .false. ! change tau_factor without reconverging.
      set_initial_tau_factor = .false.
      set_tau_factor_after_core_He_burn = -1 ! ignore if <= 0
         ! change tau_factor when center H1 < 1e-4 and center He4 < this.
      set_tau_factor_after_core_C_burn = -1 ! ignore if <= 0
         ! change tau_factor when center H1 < 1e-4, He4 < 1e-4, and center C12 < this.
      
      
      relax_mass_change = .false.
      relax_initial_mass_change = .false.
      relax_mass_change_min_steps = 10
      relax_mass_change_max_yrs_dt = 10 ! years
      relax_mass_change_init_mdot = 0 ! Msun/year
      relax_mass_change_final_mdot = 0 ! Msun/year
      
      
      ! extra heat near surface to model irradiation
      relax_irradiation = .false.
      relax_initial_irradiation = .false.
      relax_to_this_irrad_flux = 0 ! erg s^-1 cm^-2
         ! this is flux from companion
         ! we capture Pi*R^2 of that flux
         ! and distribute it uniformly in the outer 4*Pi*R^2*col_depth grams of the star.
      relax_irradiation_min_steps = 0

      irrad_col_depth = -1 ! g cm^-2

      set_irradiation = .false.
      set_initial_irradiation = .false.
      set_to_this_irrad_flux = 0


   ! lnPgas variables
      
      ! lnPgas_flag is true if we are using lnPgas variables in place of lnd
      change_lnPgas_flag = .false.
      change_initial_lnPgas_flag = .false.
      new_lnPgas_flag = .false.


   ! velocity variables
   
      ! NOTE: at present, mesa/star can deal with large velocities,
      !       but not with shocks or other "violent" hydrodynamic events.
      
      change_v_flag = .false.
      change_initial_v_flag = .false.
      new_v_flag = .false.
      
      center_ye_limit_for_v_flag = 0.45
         ! automatically turn on velocities if center_ye drops below this limit.
         ! this is useful for evolution leading up to core collapse.
         
      gamma1_integral_for_v_flag = 0d0
         ! automatically turn on velocities if center_gamma1_integral drops below this limit.
         ! this is useful for evolution leading up to pair instability core collapse.
         ! integral is sum over all cells of (gamma1-4d0/3d0) weighted by dm*P/rho
      
   ! rotation variables
           
            
      new_rotation_flag = .false. 
         ! this is only used if change_rotation_flag is true
      change_rotation_flag = .false. 
         ! if this is true, then change rotation_flag to new_rotation_flag
         ! rotation is enabled iff rotation_flag is true
      change_initial_rotation_flag = .false. 
         
      ! NOTE: why 2 flags? 
         ! because I want 3 options: set true, set false, and leave it alone.
         ! there are of course other ways to get 3 options, but this is what we have.
      
         
      ! these only apply when rotation is already on (i.e., when rotation_flag is true)
      ! that includes when you have just done change_rotation_flag to set rotation_flag true.
      ! all of these initialize the model to uniform omega (i.e. "solid body")
      
         new_omega = 0 ! rad/sec
         set_omega = .false. 
            ! applies when do ./rn or ./re
            ! if true, sets uniform omega = new_omega
         set_initial_omega = .false. 
            ! only applies at start of run, not for restarts.
            ! if true, sets uniform omega = new_omega
         
         new_omega_div_omega_crit = 0
         set_omega_div_omega_crit = .false.
            ! applies when do ./rn or ./re
         set_initial_omega_div_omega_crit = .false.
            ! only applies at start of run, not for restarts.
         
         new_surface_rotation_v = 0 ! (km sec^1)
         set_surface_rotation_v = .false.
            ! applies when do ./rn or ./re
         set_initial_surface_rotation_v = .false.
            ! only applies at start of run, not for restarts.
         
      ! the previous controls are "one shot" -- they set omega once and are done.
      ! however you might need to set omega for several models in a row
      ! in order to give things a chance to adjust to the change.
      ! the following controls let you do that.
      
         set_omega_step_limit = -1
            ! if model_number is <= this, then do set_omega 
   
         set_omega_div_omega_crit_step_limit = -1
            ! if model_number is <= this, then do set_omega_div_omega_crit 
   
         set_surf_rotation_v_step_limit = -1
            ! if model_number is <= this, then do set_surface_rotation_v 
         
         
      ! you might want to start a run at pre-ms but only turn on rotation when near zams
      ! rather than force you to stop the run near zams, change the inlist, and restart,
      ! the following will turn on rotation automatically.
      ! the working definition of "near zams" is L_nuc_burn_total/L_phot >= Lnuc_div_L_upper_limit
      ! Lnuc_div_L_upper_limit is in star controls part of inlist.
         
      ! the following apply when rotation is off and model satisfies the "near zams" test
      ! each turns on rotation and sets a step limit

         set_near_zams_omega_steps = -1 ! only applies if > 0
            ! set_omega_step_limit = model_number + set_near_zams_omega_steps - 1

         set_near_zams_omega_div_omega_crit_steps = -1 ! only applies if > 0
            ! set_omega_div_omega_crit_step_limit =
            !      model_number + set_near_zams_omega_div_omega_crit_steps - 1
         
         set_near_zams_surface_rotation_v_steps = -1 ! only applies if > 0
            ! set_surf_rotation_v_step_limit =
            !      model_number + set_surf_rotation_v_step_limit - 1
         
         
   ! relax rotation
   
      num_steps_to_relax_rotation = 100 ! use this many steps to change value

      ! if true, relax to value of new_omega
         relax_omega = .false.
            ! applies when do ./rn or ./re
         relax_initial_omega = .false.
            ! only applies at start of run, not for restarts.
         near_zams_relax_omega = .false.
            ! applies when "near zams".

      ! if true, relax to value of new_omega_div_omega_crit
         relax_omega_div_omega_crit = .false.
            ! applies when do ./rn or ./re
         relax_initial_omega_div_omega_crit = .false.
            ! only applies at start of run, not for restarts.
         near_zams_relax_omega_div_omega_crit = .false.
            ! applies when "near zams".

      ! if true, relax to value of new_surface_rotation_v
         relax_surface_rotation_v = .false.
            ! applies when do ./rn or ./re
         relax_initial_surface_rotation_v = .false.
            ! only applies at start of run, not for restarts.
         near_zams_relax_initial_surface_rotation_v = .false.
            ! applies when "near zams".
      
   
   ! controls for nonzero center M, R, L (e.g., to model neutron star envelope or rocky core planet)
   
      relax_core = .false.
      relax_initial_core = .false.
      new_core_mass = 0 ! in Msun units
      ! if you have convergence problems, you'll need to reduce these mass/step and dt values
         dlg_core_mass_per_step = 1d-3
         relax_core_years_for_dt = 1
      ! these are just examples.  adjust them to values appropriate for your application.
         core_avg_rho = 10 ! g/cm^3
         core_avg_eps = 1d-6 ! ergs/g/sec
      
      
      ! the following let you make separate changes to M, R, L for core 
   
      relax_M_center = .false. 
      relax_initial_M_center = .false. 
         ! like relax_mass_scale, but all change in mass goes into M_center
         ! NOTE: new_mass is new total mass for star, not the new M_center value.
         ! uses dlgm_per_step in same way as relax_mass_scale.
         ! Example: if want to end up with total mass = 1.4 and M_center = 1.3,
         ! start with star_mass = total - center = 0.1 = mass exterior to center
         ! then relax_M_center with new_mass = 1.4
         ! that will give a new total mass of 1.4 by changing M_center
         ! the mass exterior to the center will stay = 0.1,
         ! so the final M_center will be 1.3.
      relax_M_center_dt = 3.1558149984d1 ! secyer*1d-6
      
      relax_R_center = .false.
      relax_initial_R_center = .false.
      new_R_center = 0 ! in cm
      dlgR_per_step = 3d-3
      relax_R_center_dt = 3.1558149984d1 ! secyer*1d-6
      
      relax_L_center = .false.
      relax_initial_L_center = .false.
      new_L_center = 0 ! in ergs/second
      dlgL_per_step = 5d-2
      relax_L_center_dt = 3.1558149984d1 ! secyer*1d-6
   
      remove_center_at_cell_k = 0 ! ignore if <= 0
      remove_inner_fraction_q = 0 ! ignore if <= 0
   
      report_mass_not_fe56 = .false.
      report_cell_for_xm = -1 ! (grams)
         ! if > 0 then write smallest k s.t. mass in cells 1 to k is >= this
         
      set_to_xa_for_accretion = .false.
      set_initial_to_xa_for_accretion = .false.
      set_nzlo = -1
      set_nzhi = -1


! eos controls

   eos_file_prefix = 'mesa'  ! modify this to select a different set of EoS tables
   eosDT_Z1_suffix = '_CO_1'
   eosPT_Z1_suffix = '_CO_1'
   
   ! change eos parameters
      
      ! max Z for using tables instead of switching to HELM
      set_Z_all_HELM = .false. ! if false, just use the eos default
      Z_all_HELM = 1d99 ! switch to HELM for Z > this
      
      ! transition temperature zone for SCVH to HELM at low T
      set_HELM_SCVH_lgTs = .false. ! change limits if this is true, else use defaults
      logT_low_all_HELM = 2.2d0 ! HELM for lgT <= this
      logT_low_all_SCVH = 2.3d0 ! SCVH for lgT >= this
      
      ! transition temperature zone for OPAL to HELM at high T
      set_HELM_OPAL_lgTs = .false.
      logT_all_HELM = 7.7d0 ! HELM for lgT >= this
      logT_all_OPAL = 7.6d0 ! OPAL/SCVH for lgT <= this
   
      ! transition density zone for OPAL/SCVH to HELM/PC
      set_logRho_OPAL_SCVH_limits = .false. ! change limits if this is true, else use defaults
      logRho1_OPAL_SCVH_limit = 2.6d0 ! don't use OPAL_SCVH for logRho > this
      logRho2_OPAL_SCVH_limit = 2.5d0 ! full OPAL_SCVH okay for logRho < this
      ! blend OPAL/SCVH with HELM/PC for logRho between these
   
      ! change HELM PC limits
      set_eos_PC_parameters = .false. ! change limits if this is true, else use defaults
      mass_fraction_limit_for_PC = 1d-2 ! skip species if abundance < this
      logRho1_PC_limit = 3.7d0 ! okay for pure PC for logRho > this
      logRho2_PC_limit = 2.8d0 ! don't use PC for logRho < this (>= 2.8 or so because of PPT)
      log_Gamma_all_HELM = 1.60206d0 ! HELM for log_Gamma <= this (1.60206 = log10(40))
      log_Gamma_all_PC = 1.90309d0 ! PC for log_Gamma >= this (1.90309 = log10(80))
      PC_min_Z = 0.999d0 ! don't use PC for Z < this
      
      ! other flags
      set_other_HELM_flags = .false. ! change flags if true
      HELM_include_radiation = .true.
      HELM_always_skip_elec_pos = .false. 
         ! note: if HELM skips electron-positron, it also skips coulomb.
         ! together, this reduces HELM to doing an ideal gas eos.  
         ! if you'd like to see what happens using an ideal gas for all cases, then
         ! set these controls:
         !     set_other_HELM_flags = .true.
         !     HELM_always_skip_elec_pos = .true.
         !     HELM_include_radiation = .true. or .false. depending on what you want
         !     set_Z_all_HELM = .true.
         !     Z_all_HELM = -0.1 ! switch to HELM for Z > this
         !     PC_min_Z = 1.1 ! don't use PC for Z < this

! nuclear reactions 

   change_net = .false. ! switch nuclear reaction network
   new_net_name = '' ! only used if change_net if true
   change_initial_net = .false. ! switch nuclear reaction network at start of run
   
   adjust_abundances_for_new_isos = .true. ! if false, new isos initial abundance set to 0
   
   set_rates_preference = .false. ! for use by net + rates modules
   new_rates_preference = 2 ! only used if set_rates_preference is true
      ! 1 = NACRE rates
      ! 2 = jina reaclib rates
      
   set_rate_c12ag = '' ! empty string means ignore this control
      ! one of 'NACRE', 'jina reaclib', 'Kunz', or 'CF88'
         ! (note: our CF88 is larger than the original by a factor of 1.7)
   set_rate_n14pg = '' ! empty string means ignore this control
      ! one of 'NACRE', 'jina reaclib', or 'CF88'
   set_rate_3a = '' ! empty string means ignore this control
      ! one of 'NACRE', 'jina reaclib', 'CF88', or 'FL87'
         ! FL87 is Fushiki and Lamb, Apj, 317, 368-388, 1987
         ! and includes both strong screening and pyconuclear
   set_rate_1212 = '' ! empty string means ignore this control
      ! one of 'CF88_basic_1212', 'CF88_multi_1212', or 'G05'
      ! CF88_basic_1212 is the single rate approximation from CF88.
      ! CF88_multi_1212 combines the rates for the n, p, and a channels.
         ! c12(c12,n)mg23, c12(c12,p)na23, and c12(c12,a)ne20
         ! uses neutron branching from dayras, switkowski, and woosley, 1976.
      ! G05 is based on Gasques, et al. Phys Review C, 72, 025806 (2005)      
   
   num_special_rate_factors = 0 ! must be <= max_num_special_rate_factors
   reaction_for_special_factor(:) = ''
   special_rate_factor(:) = 1
   
   auto_extend_net = .true.
      ! if true, then automatically extend the net as needed
      ! from h_he_net to co_net and then to adv_net
      h_he_net = 'basic.net'
      co_net = 'co_burn.net'
      adv_net = 'approx21.net'      
   
   ! Heger-style adaptive network (Woosley, Heger, et al, ApJSS, 151:75-102, 2004)
   enable_adaptive_network = .false.
      min_x_for_keep = 1d-23        ! 1d-9  try larger values to see if still get ok nets
      min_x_for_n = 1d-18           ! 1d-6
      min_x_for_add = 1d-17         ! 1d-5
      ! if enable_adaptive_network is true, then
      ! at each step, the system calculates a new set of isos according to the following rules:  
         ! for each iso in the current net
            ! let Z = number of protons in the iso and N = number of neutrons.
            ! let x = max mass fraction for the iso in any cell in the model.
            ! if x >= min_x_for_keep then include the iso in new net.
            ! if x >= min_x_for_n then include following related isos:
               ! (Z,N+1)   (Z,N-1)     -- add or remove neutron
            ! if x >= min_x_for_add then include following related isos:
               ! (Z+1,N)   (Z-1,N)     -- add or remove proton
               ! (Z+2,N+2) (Z-2,N-2)   -- add or remove alpha
               ! (Z+2,N+1) (Z-2,N-1)   -- exchange neutron/alpha
               ! (Z+1,N+2) (Z-1,N-2)   -- exchange proton/alpha
               ! (Z+1,N-1) (Z-1,N+1)   -- exchange proton/neutron
               ! (Z+4,N+4) (Z+3,N+4)   -- extend alpha chain
         ! isos in the previous net can be dropped if they have x < min_x_for_keep and
            ! no other iso in the previous net causes them to be included in the new net.
         ! the new net has the included isos and all relevant reactions.
         ! the definition for the new net is saved to a text file in your local "nets" directory.
         ! the file name is composed of the model number and the number of species.
               
   net_reaction_filename = 'reactions.list'
      ! looks first in current directory, then in <data_dir>/net_data
      
   jina_reaclib_filename = '' ! empty string means use current standard version
      ! else give name of file in directory mesa/data/rates_data
      ! e.g., jina_reaclib_results_20130213default2  --- 18.8 MB file of rates data
      ! to use previous version, set to 'jina_reaclib_results05301331'

   rate_tables_dir = 'rate_tables'
         ! it will look for a local directory of this name first.
         ! if doesn't find one, it will use the one in data/rates_data.

   rate_cache_suffix = ''
         ! if this is non-empty, then use it when creating names
         ! for cache files for reaction rates from rate_tables_dir.
         ! if empty, the suffix will be '0'.
         
   ! weak rates blend weaklib and reaclib according to temperature
      ! these can be used to overwrite the defaults in mesa/rates/public/rates_def
   
      T9_weaklib_full_off = 0.01d0 ! use pure reaclib for T <= this (ignore if <= 0)
      T9_weaklib_full_on = 0.02d0 ! use pure weaklib for T >= this (ignore if <= 0)
      ! blend for intermediate temperatures
      ! for high Z elements, switch to reaclib at temp where no longer fully ionized
      ! as rough approximation for this, we switch at Fe to higher values of T9
      weaklib_blend_hi_Z = 26 ! (ignore if <= 0)
      ! if input element has Z >= weaklib_blend_hi_Z, then use the following T9 limits
      T9_weaklib_full_off_hi_Z = 0.063d0 ! use pure reaclib for T <= this (ignore if <= 0)
      T9_weaklib_full_on_hi_Z = 0.073d0 ! use pure weaklib for T >= this (ignore if <= 0)


! kap controls
   
   kappa_file_prefix = 'gn93' ! modify this to select a different set of opacity tables
      ! alternatives: 'gn93', 'gs98', 'a09', 'OP_gs98', 'OP_a09'
   kappa_lowT_prefix = 'lowT_fa05_gs98' ! for lower temperatures.
      ! alternatives: 'lowT_Freedman11', 'lowT_fa05_gs98', 
      !  'lowT_fa05_gn93', 'lowT_fa05_a09p', 'lowT_af94_gn93'
   kappa_blend_logT_upper_bdy = 4.1d0 ! <= 0 means use default
      ! actual upper boundary will be min of this and max logT for lowT tables
   kappa_blend_logT_lower_bdy = 4.0d0 ! <= 0 means use default 
      ! actual lower boundary will be max of this and min logT for highT tables
   kappa_type2_logT_lower_bdy = 3.8d0 ! <= 0 means use default 
      ! only use type2 opacities at temperatures above this limit

   kappa_CO_prefix = 'gn93_co' ! for C/O enhanced (Type 2 OPAL opacities)
      ! alternatives: 'gn93_co', 'a09_co'
   
   other_kappa_file_prefix = ''
   other_eos_file_prefix = ''
            

! ionization controls
   
   ionization_file_prefix = 'ion'
   ionization_Z1_suffix = ''


! "extra" parameters -- for use by your run_star_extras routines

   extras_lipar = 0 ! number of integer parameters in extras_ipar
      ! must be <= max_extras_params (defined in run_star_support)
   extras_ipar(:) = 0
   
   extras_lrpar = 0 ! number of real(dp) parameters in extras_rpar
      ! must be <= max_extras_params (defined in run_star_support)
   extras_rpar(:) = 0d0
   
   extras_lcpar = 0 ! number of string parameters in extras_cpar 
      ! must be <= max_extras_params (defined in run_star_support)
   extras_cpar(:) = '' ! length <= max_extras_cpar_len
   
   extras_llpar = 0 ! number of logical parameters in extras_lpar
      ! must be <= max_extras_params (defined in run_star_support)
   extras_lpar(:) = .false.


! to get a breakdown of where the time is going
   ! set first_model_for_timing to determine when the clocks start
   ! at the end of the run, there will be some output to the terminal showing times
   
   first_model_for_timing = -1
   
   
! limit max timestep
   
   set_max_dt_to_frac_lifetime = .false.
      ! if true, set max_timestep according to expected lifetime as a function of mass
      ! use the Iben & Laughlin (1989) formula to estimate lifetime
      ! multiply that times the value of max_frac_of_lifetime_per_step to get max_timestep.
   max_frac_of_lifetime_per_step = -1


! communications flag for astero and star
   astero_just_call_my_extras_check_model = .false.


! include other inlists
   
   ! can you split your star_job inlist into pieces using the following controls.
   ! BTW: it works recursively, so the extras can read extras too.

      read_extra_star_job_inlist1 = .false.
      extra_star_job_inlist1_name = 'undefined'
         ! if read_extra_star_job_inlist1 is true, then read &star_job from this namelist file
   
      read_extra_star_job_inlist2 = .false.
      extra_star_job_inlist2_name = 'undefined'
         ! if read_extra_star_job_inlist2 is true, then read &star_job from this namelist file
   
      read_extra_star_job_inlist3 = .false.
      extra_star_job_inlist3_name = 'undefined'
         ! if read_extra_star_job_inlist3 is true, then read &star_job from this namelist file
   
      read_extra_star_job_inlist4 = .false.
      extra_star_job_inlist4_name = 'undefined'
         ! if read_extra_star_job_inlist4 is true, then read &star_job from this namelist file
   
      read_extra_star_job_inlist5 = .false.
      extra_star_job_inlist5_name = 'undefined'
         ! if read_extra_star_job_inlist5 is true, then read &star_job from this namelist file

